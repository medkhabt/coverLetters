#! /bin/bash 
shopt -s expand_aliases

list(){
    # If statement, to check if cr_path is set 
    if [ -n "$project_path" ]; then 
	ls -l "$project_path/applications/$1" | grep '^d' | rev | awk '{print $1}' | rev 
    else 
	>&2 echo "/*** Specify the root directory by executing the command 'def-root on the root directory of the project ***/"
    fi
}

create(){
    #TODO repeated code
    if [ -z "$1" ] || [ -z "$2" ]; then 
	>&2 echo "/** missing input: create [firm] [position] **/"
	exit 1
    fi

    mkdir "$project_path"/applications 2>/dev/null
    mkdir "$project_path"/applications/$1 2> /dev/null
    ## Copy the template of coverletter 
    mkdir "$project_path"/applications/$1/$2 2> /dev/null 
    mkdir "$project_path"/applications/$1/$2/src 2>/dev/null
    mkdir "$project_path"/applications/$1/$2/target 2>/dev/null
    mkdir "$project_path"/applications/$1/$2/build 2>/dev/null

    echo "> application dir created." 
    ## I can even create a simlink to the template and change the path each time we add a new level or not , but i don't think it is necessary for now. 
    cp "$project_path"/.src/template_cover_letter.tex "$project_path"/applications/$1/$2/src/cover_letter.tex 
    echo ">template cover letter coppied."
    ## need to put my cv tex in the
    ## Just Copy my cv for now. 

    ## Copy the config file for the coverletter empty 

    xsltproc --output "$project_path"/applications/$1/$2/src/configs.xml "$project_path"/.src/conf.xslt "$project_path"/configs/default_configs.xml
    
    echo ">configuration generated."
    ## Copy the xsl transformer to latex
    cp "$project_path"/.src/to_latex.xslt "$project_path"/applications/$1/$2/src 
    echo "> xslt to latex copied"
    ## Generate the configs for my project 
    #xsltproc --output "$cr_path"/applications/$1/$2/src/mystyle.sty "$cr_path"/.src/configs.xslt configs/shared_configs.xml
    ## Copy the run script, with the option of regenrating the cv. 
    cp "$project_path"/.src/run.sh "$project_path"/applications/$1/$2/src
    cp "$project_path"/.src/README.md "$project_path"/applications/$1/$2/src
    echo "> finished."

return 0
}


go() {
    if [ -z "$1" ] || [ -z "$2" ]; then 
	>&2 echo "/** missing input: create [firm] [position] **/"
	exit 1
    fi
    cd "$project_path"/applications/$1/$2/src 
}

build() {
    if [ -z "$1" ] || [ -z "$2" ]; then 
	>&2 echo "/** missing input: create [firm] [position] **/"
	exit 1
    fi
    bash "$project_path"/applications/$1/$2/src/run.sh 
}
preview() {
    if [ -z "$1" ] || [ -z "$2" ]; then 
	>&2 echo "/** missing input: create [firm] [position] **/"
	exit 1
    fi
    open -F  -a Preview "$project_path"/applications/$1/$2/target/cover_letter.pdf
}

# I don't think the while is usefull in this setup
while true; do
  case "$1" in
    -v | --verbose ) VERBOSE=true; shift ;;
    -h | --help ) echo "-hlcgbp:, --verbose,--help,--list, --create, --go, --build, --preview"; HELP=true; shift ;;
    -l | --list)  list "$2" ; break ;;
    -c | --create) create "$2" "$3";  break ;;
    -g | --go) go "$2" "$3"; break;; 
    -b | --build) build "$2" "$3" ; break;; 
    -p | --preview) preview "$2" "$3" ; break;; 
    -- ) shift; break ;;
    * ) break ;;
  esac
done

