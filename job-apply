# thanks to this article (https://web.archive.org/web/20190402231844/https://debian-administration.org/article/317/An_introduction_to_bash_completion_part_2)
_job-apply() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    prev_2="${COMP_WORDS[COMP_CWORD-2]}"
    opts="-f -c  -g -b -p -l -s  --config --create --go --build --preview --list --save"
    case "${prev}" in
	-c | --create) 
	    local firms=$(for x in `job-apply -l`; do echo $x; done )
	    COMPREPLY=( $(compgen -W "${firms}" -- ${cur}) )
	    	    return 0
	;;

	-g | -b | -p | -f | -s | --go | --build | --preview | --config | --save)
	local firms=$(for x in `job-apply -l`; do echo $x; done )
	    	    COMPREPLY=( $(compgen -W "${firms}" -- ${cur}) )
	    return 0
	;;

    esac
    ## In case we have two parameters 
     if [ ${COMP_CWORD} -gt 2 ]; then
	case "${prev_2}" in 
	    -g | -b | -p | -f | -s | --go | --build | --preview | --config | --save)
		local applications=$(for x in `job-apply -l ${prev}`; do echo $x; done )
		COMPREPLY=( $(compgen -W "${applications}" -- ${cur}) )
		return 0;;
	esac
    fi


        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
}
complete -F _job-apply job-apply 
